import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { renderWithRouter, testA11y } from '../../setupTests';
import { setupUserEvent } from '../userEvent-compat';

// Mock react-window
jest.mock('react-window', () => ({
  FixedSizeList: ({ children, height, itemCount, itemSize }) => (
    <div data-testid="virtualized-list" style={{ height }}>
      <div data-testid="list-items">
        {Array.from({ length: Math.min(itemCount, 10) }, (_, i) => (
          <div key={i} data-testid="list-item">
            {children({ index: i, style: {} })}
          </div>
        ))}
      </div>
    </div>
  )
}));

// Import component to test
import { VirtualizedVulnerabilityList } from '../../components/VirtualizedLists';

describe('VirtualizedVulnerabilityList', () => {
  const mockVulnerabilities = Array.from({ length: 100 }, (_, i) => ({
    id: i + 1,
    title: `Vulnerability ${i + 1}`,
    severity: ['critical', 'high', 'medium', 'low'][i % 4],
    description: `Description for vulnerability ${i + 1}`,
    timestamp: new Date().toISOString()
  }));

  const defaultProps = {
    vulnerabilities: mockVulnerabilities,
    onItemClick: jest.fn()
  };

  test('renders virtualized list with vulnerabilities', () => {
    render(<VirtualizedVulnerabilityList {...defaultProps} />);

    expect(screen.getByTestId('virtualized-list')).toBeInTheDocument();
    expect(screen.getAllByTestId('list-item').length).toBe(10); // Only renders visible items
  });

  test('handles item click', async () => {
    const user = setupUserEvent();
    render(<VirtualizedVulnerabilityList {...defaultProps} />);

    const firstItem = screen.getAllByTestId('list-item')[0];
    await user.click(firstItem);

    expect(defaultProps.onItemClick).toHaveBeenCalledWith(mockVulnerabilities[0]);
  });

  test('applies filtering', () => {
    const filterProps = {
      ...defaultProps,
      filter: 'critical'
    };

    render(<VirtualizedVulnerabilityList {...filterProps} />);

    // Should only show critical vulnerabilities
    const items = screen.getAllByTestId('list-item');
    items.forEach(item => {
      expect(item.textContent).toContain('critical');
    });
  });

  test('handles sorting', () => {
    const sortProps = {
      ...defaultProps,
      sortBy: 'severity',
      sortOrder: 'desc'
    };

    render(<VirtualizedVulnerabilityList {...sortProps} />);

    // Should be sorted by severity
    const items = screen.getAllByTestId('list-item');
    expect(items.length).toBe(10); // Only renders visible items
  });

  test('displays severity badges correctly', () => {
    render(<VirtualizedVulnerabilityList {...defaultProps} />);

    const badges = screen.getAllByTestId('badge');
    expect(badges.length).toBeGreaterThan(0);
    
    // Check for severity indicators
    const severityBadges = screen.getAllByText(/critical|high|medium|low/i);
    expect(severityBadges.length).toBeGreaterThan(0);
  });

  test('handles empty vulnerability list', () => {
    render(<VirtualizedVulnerabilityList {...defaultProps} vulnerabilities={[]} />);

    expect(screen.queryByTestId('list-item')).not.toBeInTheDocument();
  });

  test('has proper accessibility attributes', () => {
    render(<VirtualizedVulnerabilityList {...defaultProps} />);

    const list = screen.getByTestId('virtualized-list');
    expect(list).toHaveAttribute('role');
    expect(list).toHaveAttribute('aria-label');
  });

  test('handles keyboard navigation', async () => {
    const user = setupUserEvent();
    render(<VirtualizedVulnerabilityList {...defaultProps} />);

    // Tab to first item
    await user.tab();
    const firstItem = screen.getAllByTestId('list-item')[0];
    expect(firstItem).toHaveFocus();

    // Navigate with arrow keys
    fireEvent.keyDown(firstItem, { key: 'ArrowDown' });
  });

  test('optimizes rendering with React.memo', () => {
    const { rerender } = render(<VirtualizedVulnerabilityList {...defaultProps} />);
    
    // Re-render with same props
    rerender(<VirtualizedVulnerabilityList {...defaultProps} />);
    
    // Should not cause unnecessary re-renders
    expect(screen.getByTestId('virtualized-list')).toBeInTheDocument();
  });

  test('handles large dataset efficiently', () => {
    const largeDataset = Array.from({ length: 1000 }, (_, i) => ({
      ...mockVulnerabilities[i % mockVulnerabilities.length],
      id: i + 1
    }));

    render(<VirtualizedVulnerabilityList {...defaultProps} vulnerabilities={largeDataset} />);

    // Should only render visible items despite large dataset
    const items = screen.getAllByTestId('list-item');
    expect(items.length).toBe(10); // Fixed number of visible items
  });
});
